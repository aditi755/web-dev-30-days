<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recipe App</title>
    <style>
        body{
            width: 100%;
            height: 100%;
            background-color: yellow;
        }
        .container{
            width: 60vh;
            height: 70vh;
            background-color: white;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
      .input-card{
        position: relative;
        left: 90px;
        top:10px;
      }

      .input{
        height: 25px;
      }
      .container .input-card button{
           width: 80px;
           height: 30px;
           text-align: center;
           background-color: lightcoral;
           font-size: 15px;
      }

      .result{
        margin-top: 40px;
      }
      
      .meal-details{
        width: 24vw;
        height: 50vh;
        margin: 0 auto;
        padding: 20px;
        border: 3px solid grey;
        background-color: #f9f9f9;
        margin-left: 30px;
        box-sizing: border-box; /* Ensure padding is included in the width */
        overflow: auto; /* Add scrollbars if content overflows */  
    }
      #meal-ins{
        text-align: justify;
        line-height: 1.5;
        width: 45vh;
      }
    .meal-details .meal-container{
        width: 22vw;
        height: 50vh;
        margin: 0 auto;     
        background-color: #f9f9f9;
        display: flex;
        flex-direction: column;
        gap: 10px;
        box-sizing: border-box; /* Ensure padding is included in the width */
        overflow: auto;
    }

      .meal-details::-webkit-scrollbar {
    display: none;           /*to hide scrollbar*/
  }

  .meal-container::-webkit-scrollbar {
    display: none;           /*to hide scrollbar*/
  }
      .meal-details #meal-id{
        font-size: 300;
        color: black;
      }

      .meal-details img{
         border: 2px solid rgb(212, 67, 67);
      }
     .meal-details button{
        width: 30%;
        height: 30%;
        background-color: aqua;
        margin-left: 82px;
        font-size: 17px;
     }

     .meal-details .new .new-child{
        width: 50%;
        height: 50%;
        background-color: aqua;
     }
      @media only screen and (max-width: 600px) {
           
            .container{
                width: 80vh;
            }
            .input-card{
                margin-left: -40px;
            }
        .meal-details img{
         margin-left: -7px;
      }
      #meal-ins{
        width: 60vh;
        text-align: justify; /* Justify text to evenly space lines */
  line-height: 1.5; /* Adjust line height for better readability */
      }
    .meal-details{
        width: 70vh;
        margin-top: -5vh;
    }
    .meal-details .meal-container{
        width: 68vh;
    }
    .meal-container button{
        width: 40%;
    }

}
    </style>
</head>
<body>
    <div class="container">
        <div class="input-card">
            <input type="text" class="input">
           <button class="search">Search</button>
        </div>
        <div class="result"></div>
    </div>
    <script>

let result = document.querySelector('.result');
  let search = document.querySelector('.search');
  let input = document.querySelector('.input');
  let url = 'https://www.themealdb.com/api/json/v1/1/search.php?s=';

  search.addEventListener('click', async function() { // Add async here
    let inputValue = input.value;
    console.log(inputValue);

    try {
      const response = await fetch(url + inputValue);
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const data = await response.json();
      let mymeal = data.meals[0];
      console.log(mymeal);
     

      result.innerHTML = `
      <div class="meal-details">
        <div class="meal-container">
        <div id= "meal-id"> <strong>Meal Id is </strong> ${JSON.parse(mymeal.idMeal)} <br> </div>
        <div id= "meal-cat"><strong>Meal Category is </strong> ${mymeal.strCategory}  <br> </div>
        <div id= "meal-area"><strong>Meal Area is </strong>${mymeal.strArea} <br> </div>
        <div id= "meal-ins"><strong>Meal Instructions are: </strong> <br>
             ${mymeal.strInstructions}</div> <br>
        <img src="${mymeal.strMealThumb}" alt="${mymeal.strMeal}" style="width: 270px; height: 200px;">
        <button class="button"> Show more </button>
        </div>
       
            <div class= "ingredient-con"></div>
         
        </div> 
      `;

      let show = document.querySelector('.button');
      let meal = document.querySelector('.meal-container');
      let newadd = document.createElement('ul');
      let ingredientCon = document.querySelector('.ingredient-con');
      
       //looping code to display ingredienst in line
       let count = 1;
      let ingredients =  [];
      for(let i in mymeal){
           let ingredient = "";
           let measure = "";
           if(i.startsWith("strIngredient") && mymeal[i]){
            ingredient = mymeal[i];
            measure = mymeal['strMeasure' + count ];
            count += 1;
            ingredients.push({ingredient, measure});
            console.log(ingredient, measure);
           }
      }
     
     show.addEventListener("click", () => {
      meal.style.display = 'none';
                                      //usually do document.createElement while adding new element first make it separately then add it with parent
    
    ingredients.forEach(({ ingredient, measure }) => {   //array destructing of ingredient and measure, forEach only applicable to arrays
        let newchild = document.createElement('li');
        newchild.classList.add('new-child');
        newchild.innerText =`${ingredient}: ${measure}` ;
        newadd.appendChild(newchild);
        ingredientCon.appendChild(newadd);
        console.log('ing')
    })
    
      }
      )
      // Use fetched data, update UI, etc. (for example, display in '.result')
     // result.textContent = JSON.stringify(mymeal);
    } catch (error) {
      console.error('Error:', error);
      // Handle errors here, e.g., display an error message in '.result'
      result.textContent = 'Error fetching data'; 
    }
  });

   
</script>

</body>
</html>
